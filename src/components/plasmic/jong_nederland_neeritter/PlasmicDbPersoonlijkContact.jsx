/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o1okMcGKKQpxNMvBHBF5AX
// Component: Vw7-oc2FdHyc
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import JnnLayoutPaginaBasis from "../../JnnLayoutPaginaBasis"; // plasmic-import: pNbHwpahi8Jg/component
import JnnLogicaJaNeeZichtbaarheid from "../../JnnLogicaJaNeeZichtbaarheid"; // plasmic-import: 4lb3-XGhjTbZ/component
import JnnElementProfielfoto from "../../JnnElementProfielfoto"; // plasmic-import: Q8zDqOmruP8H/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import JnnElementKnop from "../../JnnElementKnop"; // plasmic-import: otoKTrPotBhl/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: 44Bs5c9YUTWl/component
import Select from "../../Select"; // plasmic-import: Y4goiaYc4-rB/component
import { useScreenVariants as useScreenVariantsafQfxQq4Z6Fv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AfQfxQQ4z6FV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: o1okMcGKKQpxNMvBHBF5AX/projectcss
import sty from "./PlasmicDbPersoonlijkContact.module.css"; // plasmic-import: Vw7-oc2FdHyc/css

createPlasmicElementProxy;

export const PlasmicDbPersoonlijkContact__VariantProps = new Array();

export const PlasmicDbPersoonlijkContact__ArgProps = new Array();

const $$ = {};

function PlasmicDbPersoonlijkContact__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsafQfxQq4Z6Fv()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <JnnLayoutPaginaBasis
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <div
            data-plasmic-name={"hoofdtitel"}
            data-plasmic-override={overrides.hoofdtitel}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.hoofdtitel
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Persoonlijke Info"}
                </h1>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__aX1NF
            )}
            href={`/dashboard`}
            platform={"react"}
          >
            {"<-- terug naar dahsboard"}
          </PlasmicLink__>
          <JnnLogicaJaNeeZichtbaarheid
            data-plasmic-name={"staflidInDatabank"}
            data-plasmic-override={overrides.staflidInDatabank}
            className={classNames("__wab_instance", sty.staflidInDatabank)}
            conditie={(() => {
              try {
                return currentUser.customProperties;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            ja={
              <React.Fragment>
                <section
                  data-plasmic-name={"profielSectie"}
                  data-plasmic-override={overrides.profielSectie}
                  className={classNames(projectcss.all, sty.profielSectie)}
                >
                  <div
                    data-plasmic-name={"profielTitel"}
                    data-plasmic-override={overrides.profielTitel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.profielTitel
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__f4UMr
                          )}
                        >
                          {"Je Profiel"}
                        </h2>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"infoTitel"}
                    data-plasmic-override={overrides.infoTitel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.infoTitel
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__jRlb0
                          )}
                        >
                          {"Info"}
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iBeO
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"(Contacteer"}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__hphNw
                          )}
                          href={`/contact`}
                          platform={"react"}
                        >
                          {"onze websitebeheerder(s)"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{"om aan te passen)"}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"infoSecite"}
                    data-plasmic-override={overrides.infoSecite}
                    className={classNames(projectcss.all, sty.infoSecite)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3BjV
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <ul
                            data-plasmic-name={"ul"}
                            data-plasmic-override={overrides.ul}
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__su2Kn
                              )}
                            >
                              {"Voornaam:"}
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__hdEl0
                              )}
                            >
                              {"Achternaam:"}
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__gvrI
                              )}
                            >
                              {"Rol:"}
                            </li>
                          </ul>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bC20R)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nKml0
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentUser.customProperties.voornaam;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zVspH
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentUser.customProperties.achternaam;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2LZb5
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentUser.roleName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"fotoTitel"}
                    data-plasmic-override={overrides.fotoTitel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.fotoTitel
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__ibn8J
                          )}
                        >
                          {"Foto"}
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"fotoSectie"}
                    data-plasmic-override={overrides.fotoSectie}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.fotoSectie)}
                  >
                    <JnnElementProfielfoto
                      data-plasmic-name={"jnnElementProfielfoto"}
                      data-plasmic-override={overrides.jnnElementProfielfoto}
                      className={classNames(
                        "__wab_instance",
                        sty.jnnElementProfielfoto
                      )}
                      user={(() => {
                        try {
                          return currentUser;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0BqVj
                      )}
                    >
                      <UploadWrapper
                        data-plasmic-name={"upload"}
                        data-plasmic-override={overrides.upload}
                        accept={"image/*"}
                        className={classNames("__wab_instance", sty.upload)}
                        files={generateStateValueProp($state, [
                          "upload",
                          "files"
                        ])}
                        listType={"picture"}
                        maxCount={1}
                        onFilesChange={async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "upload",
                            "files"
                          ]).apply(null, eventArgs);
                        }}
                        showUploadList={true}
                      >
                        <JnnElementKnop
                          data-plasmic-name={"uploadknop"}
                          data-plasmic-override={overrides.uploadknop}
                          className={classNames(
                            "__wab_instance",
                            sty.uploadknop
                          )}
                          knopnaam={"Upload nieuwe"}
                        />
                      </UploadWrapper>
                      <JnnElementKnop
                        data-plasmic-name={"opslaanknop"}
                        data-plasmic-override={overrides.opslaanknop}
                        className={classNames(
                          "__wab_instance",
                          sty.opslaanknop
                        )}
                        geblokkeerd={(() => {
                          try {
                            return $state.upload.files.length == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "geblokkeerd";
                            }
                            throw e;
                          }
                        })()}
                        klikActie={async event => {
                          const $steps = {};
                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "6AveLiAZ3g8w9NXfcRGGGs",
                                    opId: "70a401e0-4fdd-4ba5-8c3c-3fc2b02489ec",
                                    userArgs: {
                                      content: [
                                        $state.upload.files[0].contents
                                      ],

                                      contentType: [$state.upload.files[0].type]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId:
                                      "a1e79d69-eede-4e72-855b-ccb4e289d505"
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }}
                        knopnaam={"Opslaan"}
                      />
                    </Stack__>
                    <JnnElementKnop
                      data-plasmic-name={"pluumkeknop"}
                      data-plasmic-override={overrides.pluumkeknop}
                      className={classNames("__wab_instance", sty.pluumkeknop)}
                      geblokkeerd={(() => {
                        try {
                          return !currentUser.customProperties.foto;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      klikActie={async event => {
                        const $steps = {};
                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "viL2whDAJGPSyEaiJ1wpYg",
                                  opId: "2362fd50-2961-461a-bba6-5c71bd879d29",
                                  userArgs: {
                                    variables: [null, null]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }}
                      knopnaam={"Pluumke"}
                    />
                  </Stack__>
                </section>
                <section
                  data-plasmic-name={"contactSectie"}
                  data-plasmic-override={overrides.contactSectie}
                  className={classNames(projectcss.all, sty.contactSectie)}
                >
                  <div
                    data-plasmic-name={"contactTitel"}
                    data-plasmic-override={overrides.contactTitel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.contactTitel
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__nXs2
                          )}
                        >
                          {"Contact"}
                        </h2>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3U1Kv
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"Je contact-info is openbaar zichtbaar op "}
                      </React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__yBlIe
                          )}
                          href={`/contact`}
                          platform={"react"}
                        >
                          {"onze contactpagina"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>
                        {
                          ".\nAls je dit niet wil, vul dan geen contactinformatie in."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        <FormItemWrapper
                          data-plasmic-name={"vasteTel"}
                          data-plasmic-override={overrides.vasteTel}
                          className={classNames("__wab_instance", sty.vasteTel)}
                          initialValue={(() => {
                            try {
                              return currentUser.customProperties[
                                "contact vast tel"
                              ];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"Vaste telefoon"}
                          name={"vaste tel"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput2"}
                            data-plasmic-override={overrides.textInput2}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput2
                            )}
                            onChange={async (...eventArgs) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "textInput2",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);
                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Vul eventueel iets in..."}
                            type={"tel"}
                            value={
                              generateStateValueProp($state, [
                                "textInput2",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          data-plasmic-name={"mobiel"}
                          data-plasmic-override={overrides.mobiel}
                          className={classNames("__wab_instance", sty.mobiel)}
                          initialValue={(() => {
                            try {
                              return currentUser.customProperties[
                                "contact mob tel"
                              ];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"Mobiele telefoon"}
                          name={"mob tel"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput3"}
                            data-plasmic-override={overrides.textInput3}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput3
                            )}
                            onChange={async (...eventArgs) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "textInput3",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);
                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Vul eventueel iets in..."}
                            type={"tel"}
                            value={
                              generateStateValueProp($state, [
                                "textInput3",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          data-plasmic-name={"voorkeur"}
                          data-plasmic-override={overrides.voorkeur}
                          className={classNames("__wab_instance", sty.voorkeur)}
                          hidden={(() => {
                            try {
                              return !$state.form.value["mob tel"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()}
                          initialValue={(() => {
                            try {
                              return currentUser.customProperties[
                                "contact mob voorkeur"
                              ];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"Mobiele voorkeur"}
                          name={"voorkeur"}
                        >
                          <Select
                            data-plasmic-name={"select"}
                            data-plasmic-override={overrides.select}
                            className={classNames("__wab_instance", sty.select)}
                            onChange={async (...eventArgs) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "select",
                                  "value"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);
                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            options={(() => {
                              const __composite = [
                                { value: null },
                                { value: null },
                                { value: null }
                              ];

                              __composite["0"]["value"] = "bellen";
                              __composite["1"]["value"] = "Whatsapp";
                              __composite["2"]["value"] = "geen";
                              return __composite;
                            })()}
                            placeholder={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentUser.customProperties[
                                      "contact mob voorkeur"
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Select\u2026";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            value={generateStateValueProp($state, [
                              "select",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          data-plasmic-name={"email"}
                          data-plasmic-override={overrides.email}
                          className={classNames("__wab_instance", sty.email)}
                          initialValue={(() => {
                            try {
                              return currentUser.customProperties[
                                "contact mail"
                              ];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"E-mail"}
                          name={"email"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput"}
                            data-plasmic-override={overrides.textInput}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput
                            )}
                            onChange={async (...eventArgs) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "textInput",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);
                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Vul eventueel iets in..."}
                            type={"email"}
                            value={
                              generateStateValueProp($state, [
                                "textInput",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormItemWrapper>
                        <JnnElementKnop
                          className={classNames(
                            "__wab_instance",
                            sty.jnnElementKnop__sx02L
                          )}
                          klikActie={async event => {
                            const $steps = {};
                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "viL2whDAJGPSyEaiJ1wpYg",
                                      opId: "2f209d18-82ef-4f34-a249-c6ad7183a53c",
                                      userArgs: {
                                        variables: [
                                          $state.form.value.voorkeur,
                                          $state.form.value["vaste tel"],
                                          $state.form.value["mob tel"],
                                          $state.form.value.email
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId:
                                        "a1e79d69-eede-4e72-855b-ccb4e289d505"
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }
                          }}
                          knopnaam={"Opslaan"}
                        />
                      </FormWrapper>
                    );
                  })()}
                </section>
              </React.Fragment>
            }
            nee={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ajkhD
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__uz7Wv
                        )}
                      >
                        {"Profiel aanmaken"}
                      </h2>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nBEkW
                  )}
                >
                  {
                    "Een websitebeheerder heeft jouw profiel niet manueel aangemaakt. Dit kan je hier zelf doen."
                  }
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form2),
                    extendedOnValuesChange: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form2", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],

                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form2", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form2"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form2.isSubmitting"
                      }
                    ],

                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <FormWrapper
                      data-plasmic-name={"form2"}
                      data-plasmic-override={overrides.form2}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__pe8Lt
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dO0M
                            )}
                          >
                            {"Voornaam"}
                          </div>
                        }
                        name={"voornaam"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput4"}
                          data-plasmic-override={overrides.textInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput4
                          )}
                          onChange={async (...eventArgs) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "textInput4",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);
                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Geef je voornaam in..."}
                          value={
                            generateStateValueProp($state, [
                              "textInput4",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__nn6Ts
                        )}
                        label={"Achternaam"}
                        name={"achternaam"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput5"}
                          data-plasmic-override={overrides.textInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput5
                          )}
                          onChange={async (...eventArgs) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "textInput5",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);
                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Geef je achternaam in..."}
                          value={
                            generateStateValueProp($state, [
                              "textInput5",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </FormItemWrapper>
                      <JnnElementKnop
                        className={classNames(
                          "__wab_instance",
                          sty.jnnElementKnop__gLay0
                        )}
                        klikActie={async event => {
                          const $steps = {};
                          $steps["postgresCreate"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "viL2whDAJGPSyEaiJ1wpYg",
                                    opId: "f60978f7-ac85-4171-bc90-eaf7bc1b16c4",
                                    userArgs: {
                                      variables: [
                                        $state.form2.value.achternaam,
                                        $state.form2.value.voornaam
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresCreate"] != null &&
                            typeof $steps["postgresCreate"] === "object" &&
                            typeof $steps["postgresCreate"].then === "function"
                          ) {
                            $steps["postgresCreate"] = await $steps[
                              "postgresCreate"
                            ];
                          }
                        }}
                        knopnaam={"Opslaan"}
                      />
                    </FormWrapper>
                  );
                })()}
              </React.Fragment>
            }
          />
        </JnnLayoutPaginaBasis>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "hoofdtitel",
    "h1",
    "staflidInDatabank",
    "profielSectie",
    "profielTitel",
    "infoTitel",
    "infoSecite",
    "ul",
    "fotoTitel",
    "fotoSectie",
    "jnnElementProfielfoto",
    "upload",
    "uploadknop",
    "opslaanknop",
    "pluumkeknop",
    "contactSectie",
    "contactTitel",
    "form",
    "vasteTel",
    "textInput2",
    "mobiel",
    "textInput3",
    "voorkeur",
    "select",
    "email",
    "textInput",
    "form2",
    "textInput4",
    "textInput5"
  ],

  hoofdtitel: ["hoofdtitel", "h1"],
  h1: ["h1"],
  staflidInDatabank: [
    "staflidInDatabank",
    "profielSectie",
    "profielTitel",
    "infoTitel",
    "infoSecite",
    "ul",
    "fotoTitel",
    "fotoSectie",
    "jnnElementProfielfoto",
    "upload",
    "uploadknop",
    "opslaanknop",
    "pluumkeknop",
    "contactSectie",
    "contactTitel",
    "form",
    "vasteTel",
    "textInput2",
    "mobiel",
    "textInput3",
    "voorkeur",
    "select",
    "email",
    "textInput",
    "form2",
    "textInput4",
    "textInput5"
  ],

  profielSectie: [
    "profielSectie",
    "profielTitel",
    "infoTitel",
    "infoSecite",
    "ul",
    "fotoTitel",
    "fotoSectie",
    "jnnElementProfielfoto",
    "upload",
    "uploadknop",
    "opslaanknop",
    "pluumkeknop"
  ],

  profielTitel: ["profielTitel"],
  infoTitel: ["infoTitel"],
  infoSecite: ["infoSecite", "ul"],
  ul: ["ul"],
  fotoTitel: ["fotoTitel"],
  fotoSectie: [
    "fotoSectie",
    "jnnElementProfielfoto",
    "upload",
    "uploadknop",
    "opslaanknop",
    "pluumkeknop"
  ],

  jnnElementProfielfoto: ["jnnElementProfielfoto"],
  upload: ["upload", "uploadknop"],
  uploadknop: ["uploadknop"],
  opslaanknop: ["opslaanknop"],
  pluumkeknop: ["pluumkeknop"],
  contactSectie: [
    "contactSectie",
    "contactTitel",
    "form",
    "vasteTel",
    "textInput2",
    "mobiel",
    "textInput3",
    "voorkeur",
    "select",
    "email",
    "textInput"
  ],

  contactTitel: ["contactTitel"],
  form: [
    "form",
    "vasteTel",
    "textInput2",
    "mobiel",
    "textInput3",
    "voorkeur",
    "select",
    "email",
    "textInput"
  ],

  vasteTel: ["vasteTel", "textInput2"],
  textInput2: ["textInput2"],
  mobiel: ["mobiel", "textInput3"],
  textInput3: ["textInput3"],
  voorkeur: ["voorkeur", "select"],
  select: ["select"],
  email: ["email", "textInput"],
  textInput: ["textInput"],
  form2: ["form2", "textInput4", "textInput5"],
  textInput4: ["textInput4"],
  textInput5: ["textInput5"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDbPersoonlijkContact__ArgProps,
          internalVariantPropNames: PlasmicDbPersoonlijkContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDbPersoonlijkContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDbPersoonlijkContact";
  } else {
    func.displayName = `PlasmicDbPersoonlijkContact.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={"a1e79d69-eede-4e72-855b-ccb4e289d505"}
      appId={"o1okMcGKKQpxNMvBHBF5AX"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "o1okMcGKKQpxNMvBHBF5AX"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicDbPersoonlijkContact = Object.assign(
  // Top-level PlasmicDbPersoonlijkContact renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    hoofdtitel: makeNodeComponent("hoofdtitel"),
    h1: makeNodeComponent("h1"),
    staflidInDatabank: makeNodeComponent("staflidInDatabank"),
    profielSectie: makeNodeComponent("profielSectie"),
    profielTitel: makeNodeComponent("profielTitel"),
    infoTitel: makeNodeComponent("infoTitel"),
    infoSecite: makeNodeComponent("infoSecite"),
    ul: makeNodeComponent("ul"),
    fotoTitel: makeNodeComponent("fotoTitel"),
    fotoSectie: makeNodeComponent("fotoSectie"),
    jnnElementProfielfoto: makeNodeComponent("jnnElementProfielfoto"),
    upload: makeNodeComponent("upload"),
    uploadknop: makeNodeComponent("uploadknop"),
    opslaanknop: makeNodeComponent("opslaanknop"),
    pluumkeknop: makeNodeComponent("pluumkeknop"),
    contactSectie: makeNodeComponent("contactSectie"),
    contactTitel: makeNodeComponent("contactTitel"),
    form: makeNodeComponent("form"),
    vasteTel: makeNodeComponent("vasteTel"),
    textInput2: makeNodeComponent("textInput2"),
    mobiel: makeNodeComponent("mobiel"),
    textInput3: makeNodeComponent("textInput3"),
    voorkeur: makeNodeComponent("voorkeur"),
    select: makeNodeComponent("select"),
    email: makeNodeComponent("email"),
    textInput: makeNodeComponent("textInput"),
    form2: makeNodeComponent("form2"),
    textInput4: makeNodeComponent("textInput4"),
    textInput5: makeNodeComponent("textInput5"),
    // Metadata about props expected for PlasmicDbPersoonlijkContact
    internalVariantProps: PlasmicDbPersoonlijkContact__VariantProps,
    internalArgProps: PlasmicDbPersoonlijkContact__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Persoonlijk en Contact",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDbPersoonlijkContact;
/* prettier-ignore-end */
