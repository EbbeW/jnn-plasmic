/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o1okMcGKKQpxNMvBHBF5AX
// Component: otoKTrPotBhl
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: o1okMcGKKQpxNMvBHBF5AX/projectcss
import sty from "./PlasmicJnnElementKnop.module.css"; // plasmic-import: otoKTrPotBhl/css

createPlasmicElementProxy;

export const PlasmicJnnElementKnop__VariantProps = new Array(
  "geblokkeerd",
  "secundair"
);

export const PlasmicJnnElementKnop__ArgProps = new Array(
  "knopnaam",
  "klikActie"
);

const $$ = {};

function PlasmicJnnElementKnop__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          knopnaam: "klik op mij"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "geblokkeerd",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.geblokkeerd
      },
      {
        path: "secundair",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.secundair
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootgeblokkeerd]: hasVariant(
            $state,
            "geblokkeerd",
            "geblokkeerd"
          ),
          [sty.rootsecundair]: hasVariant($state, "secundair", "secundair")
        }
      )}
      disabled={
        hasVariant($state, "geblokkeerd", "geblokkeerd")
          ? true
          : (() => {
              try {
                return $state.geblokkeerd;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      }
      onClick={args.klikActie}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textgeblokkeerd]: hasVariant(
            $state,
            "geblokkeerd",
            "geblokkeerd"
          ),
          [sty.textsecundair]: hasVariant($state, "secundair", "secundair")
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.knopnaam;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Log in";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </button>
  );
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicJnnElementKnop__ArgProps,
          internalVariantPropNames: PlasmicJnnElementKnop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicJnnElementKnop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJnnElementKnop";
  } else {
    func.displayName = `PlasmicJnnElementKnop.${nodeName}`;
  }
  return func;
}

export const PlasmicJnnElementKnop = Object.assign(
  // Top-level PlasmicJnnElementKnop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicJnnElementKnop
    internalVariantProps: PlasmicJnnElementKnop__VariantProps,
    internalArgProps: PlasmicJnnElementKnop__ArgProps
  }
);

export default PlasmicJnnElementKnop;
/* prettier-ignore-end */
