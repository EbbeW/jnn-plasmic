/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o1okMcGKKQpxNMvBHBF5AX
// Component: GzjjTDGcQciw
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: o1okMcGKKQpxNMvBHBF5AX/projectcss
import sty from "./PlasmicJnnElementLinkMetIcoon.module.css"; // plasmic-import: GzjjTDGcQciw/css
import JnnSleutelSvgIcon from "./icons/PlasmicIcon__JnnSleutelSvg"; // plasmic-import: x2zcDXWQ9si_/icon

createPlasmicElementProxy;

export const PlasmicJnnElementLinkMetIcoon__VariantProps = new Array("kleur");

export const PlasmicJnnElementLinkMetIcoon__ArgProps = new Array(
  "tekst",
  "icoon",
  "paginalink"
);

const $$ = {};

function PlasmicJnnElementLinkMetIcoon__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          tekst: "link",
          paginalink: `/`
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "kleur",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.kleur
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootkleur_geel]: hasVariant($state, "kleur", "geel"),
          [sty.rootkleur_groen]: hasVariant($state, "kleur", "groen"),
          [sty.rootkleur_oranje]: hasVariant($state, "kleur", "oranje"),
          [sty.rootkleur_roze]: hasVariant($state, "kleur", "roze")
        }
      )}
      href={(() => {
        try {
          return $props.paginalink;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={"react"}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <JnnSleutelSvgIcon
            className={classNames(projectcss.all, sty.svg__ss4GM, {
              [sty.svgkleur_groen__ss4GMF6I]: hasVariant(
                $state,
                "kleur",
                "groen"
              )
            })}
            role={"img"}
          />
        ),

        value: args.icoon,
        className: classNames(sty.slotTargetIcoon, {
          [sty.slotTargetIcoonkleur_geel]: hasVariant($state, "kleur", "geel"),
          [sty.slotTargetIcoonkleur_groen]: hasVariant(
            $state,
            "kleur",
            "groen"
          ),
          [sty.slotTargetIcoonkleur_oranje]: hasVariant(
            $state,
            "kleur",
            "oranje"
          ),
          [sty.slotTargetIcoonkleur_roze]: hasVariant($state, "kleur", "roze")
        })
      })}
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textkleur_geel]: hasVariant($state, "kleur", "geel"),
          [sty.textkleur_groen]: hasVariant($state, "kleur", "groen"),
          [sty.textkleur_oranje]: hasVariant($state, "kleur", "oranje"),
          [sty.textkleur_roze]: hasVariant($state, "kleur", "roze")
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.tekst;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "link";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </PlasmicLink__>
  );
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicJnnElementLinkMetIcoon__ArgProps,
          internalVariantPropNames: PlasmicJnnElementLinkMetIcoon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicJnnElementLinkMetIcoon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJnnElementLinkMetIcoon";
  } else {
    func.displayName = `PlasmicJnnElementLinkMetIcoon.${nodeName}`;
  }
  return func;
}

export const PlasmicJnnElementLinkMetIcoon = Object.assign(
  // Top-level PlasmicJnnElementLinkMetIcoon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicJnnElementLinkMetIcoon
    internalVariantProps: PlasmicJnnElementLinkMetIcoon__VariantProps,
    internalArgProps: PlasmicJnnElementLinkMetIcoon__ArgProps
  }
);

export default PlasmicJnnElementLinkMetIcoon;
/* prettier-ignore-end */
