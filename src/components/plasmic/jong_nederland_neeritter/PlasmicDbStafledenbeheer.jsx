/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o1okMcGKKQpxNMvBHBF5AX
// Component: sh-uP5cin7Ty
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import JnnLayoutPaginaBasis from "../../JnnLayoutPaginaBasis"; // plasmic-import: pNbHwpahi8Jg/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import JnnElementKnop from "../../JnnElementKnop"; // plasmic-import: otoKTrPotBhl/component
import Checkbox from "../../Checkbox"; // plasmic-import: ZUDTp8bVWCGd/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { useScreenVariants as useScreenVariantsafQfxQq4Z6Fv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AfQfxQQ4z6FV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: o1okMcGKKQpxNMvBHBF5AX/projectcss
import sty from "./PlasmicDbStafledenbeheer.module.css"; // plasmic-import: sh-uP5cin7Ty/css

createPlasmicElementProxy;

export const PlasmicDbStafledenbeheer__VariantProps = new Array();

export const PlasmicDbStafledenbeheer__ArgProps = new Array();

const $$ = {};

function PlasmicDbStafledenbeheer__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "toevoegform.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "toevoegform",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "toevoegform.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "toevoegform",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "bewerkForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "bewerkForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "bewerkForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "bewerkForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "bewerkEmail.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "bewerkVoornaam.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "bewerkAchternaam.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "nieuwEmail.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "nieuwVoornaam.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "nieuwAchternaam.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    alleLeden: usePlasmicDataOp(() => {
      return {
        sourceId: "viL2whDAJGPSyEaiJ1wpYg",
        opId: "6e039209-f0e9-4945-8208-3175ae24d2bb",
        userArgs: {},
        cacheKey: `plasmic.$.6e039209-f0e9-4945-8208-3175ae24d2bb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsafQfxQq4Z6Fv()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <JnnLayoutPaginaBasis
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__da7ZL
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Stafleden beheer"}
                </h1>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link
            )}
            href={`/dashboard`}
            platform={"react"}
          >
            {"<-- terug naar dahsboard"}
          </PlasmicLink__>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rzPxd
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    {"Stafleden:"}
                  </h2>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            {(() => {
              const child$Props = {
                activeKey: generateStateValueProp($state, [
                  "accordion",
                  "activePanelId"
                ]),
                bordered: true,
                className: classNames("__wab_instance", sty.accordion),
                expandIconPosition: "start",
                items: (
                  <React.Fragment>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__eyRn1
                      )}
                      id={1}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aOuIu
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__wLquT
                                )}
                              >
                                {"Nieuw lid toevoegen"}
                              </h3>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      }
                      showArrow={true}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.toevoegform
                          ),
                          extendedOnValuesChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["toevoegform", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [
                            { label: "Name", name: "name", inputType: "Text" },
                            {
                              label: "Message",
                              name: "message",
                              inputType: "Text Area"
                            }
                          ],

                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "advanced",
                          onIsSubmittingChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["toevoegform", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["toevoegform"] = ref;
                          },
                          submitSlot: null,
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "toevoegform.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "toevoegform.isSubmitting"
                            }
                          ],

                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <FormWrapper
                            data-plasmic-name={"toevoegform"}
                            data-plasmic-override={overrides.toevoegform}
                            {...child$Props}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__mLaUt
                              )}
                              label={"email"}
                              name={"email"}
                              rules={[{ ruleType: "required" }]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.nieuwEmail
                                  ),
                                  onChange: async (...eventArgs) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["nieuwEmail", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "nieuwEmail",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "nieuwEmail.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"nieuwEmail"}
                                    data-plasmic-override={overrides.nieuwEmail}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__lCzKs
                              )}
                              label={"voornaam"}
                              name={"voornaam"}
                              rules={[{ ruleType: "required" }]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.nieuwVoornaam
                                  ),
                                  onChange: async (...eventArgs) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["nieuwVoornaam", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "nieuwVoornaam",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "nieuwVoornaam.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"nieuwVoornaam"}
                                    data-plasmic-override={
                                      overrides.nieuwVoornaam
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__fiskR
                              )}
                              initialValue={``}
                              label={"achternaam"}
                              name={"achternaam"}
                              rules={[{ ruleType: "required" }]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.nieuwAchternaam
                                  ),
                                  onChange: async (...eventArgs) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["nieuwAchternaam", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "nieuwAchternaam",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "nieuwAchternaam.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"nieuwAchternaam"}
                                    data-plasmic-override={
                                      overrides.nieuwAchternaam
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <JnnElementKnop
                              className={classNames(
                                "__wab_instance",
                                sty.jnnElementKnop___3X2R2
                              )}
                              klikActie={async event => {
                                const $steps = {};
                                $steps["postgresCreate"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "viL2whDAJGPSyEaiJ1wpYg",
                                          opId: "b06c9d69-3c69-4e0b-bce1-18bfd51d4542",
                                          userArgs: {
                                            variables: [
                                              $state.toevoegform.value
                                                .achternaam,
                                              $state.toevoegform.value.email,
                                              $state.toevoegform.value.voornaam
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],

                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["postgresCreate"] != null &&
                                  typeof $steps["postgresCreate"] ===
                                    "object" &&
                                  typeof $steps["postgresCreate"].then ===
                                    "function"
                                ) {
                                  $steps["postgresCreate"] = await $steps[
                                    "postgresCreate"
                                  ];
                                }
                                $steps["runActionOnToevoegform"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        tplRef: "toevoegform",
                                        action: "clearFields"
                                      };
                                      return (({ tplRef, action, args }) => {
                                        return $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? [])
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runActionOnToevoegform"] != null &&
                                  typeof $steps["runActionOnToevoegform"] ===
                                    "object" &&
                                  typeof $steps["runActionOnToevoegform"]
                                    .then === "function"
                                ) {
                                  $steps["runActionOnToevoegform"] =
                                    await $steps["runActionOnToevoegform"];
                                }
                              }}
                              knopnaam={"voeg toe"}
                            />
                          </FormWrapper>
                        );
                      })()}
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__rrocc
                      )}
                      id={2}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5Ouu
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__jslW7
                                )}
                              >
                                {"Lid bewerken / verwijderen"}
                              </h3>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__liIsa
                        )}
                      >
                        {
                          "De login email van een lid is niet bewerkbaar. De email die je hier intypt geeft aan wiens gegevens je bewerkt."
                        }
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.bewerkForm
                          ),
                          extendedOnValuesChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["bewerkForm", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [
                            { label: "Name", name: "name", inputType: "Text" },
                            {
                              label: "Message",
                              name: "message",
                              inputType: "Text Area"
                            }
                          ],

                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "advanced",
                          onIsSubmittingChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["bewerkForm", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["bewerkForm"] = ref;
                          },
                          submitSlot: null,
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "bewerkForm.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "bewerkForm.isSubmitting"
                            }
                          ],

                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <FormWrapper
                            data-plasmic-name={"bewerkForm"}
                            data-plasmic-override={overrides.bewerkForm}
                            {...child$Props}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__r7PvV
                              )}
                              label={"email"}
                              name={"email"}
                              rules={[{ ruleType: "required" }]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.bewerkEmail
                                  ),
                                  onChange: async (...eventArgs) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["bewerkEmail", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "bewerkEmail",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "bewerkEmail.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"bewerkEmail"}
                                    data-plasmic-override={
                                      overrides.bewerkEmail
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__tf9Vj
                              )}
                              label={"voornaam"}
                              name={"voornaam"}
                              rules={[{ ruleType: "required" }]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.bewerkVoornaam
                                  ),
                                  onChange: async (...eventArgs) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["bewerkVoornaam", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "bewerkVoornaam",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "bewerkVoornaam.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"bewerkVoornaam"}
                                    data-plasmic-override={
                                      overrides.bewerkVoornaam
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__cFw2F
                              )}
                              label={"achternaam"}
                              name={"achternaam"}
                              rules={[{ ruleType: "required" }]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.bewerkAchternaam
                                  ),
                                  onChange: async (...eventArgs) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["bewerkAchternaam", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "bewerkAchternaam",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "bewerkAchternaam.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"bewerkAchternaam"}
                                    data-plasmic-override={
                                      overrides.bewerkAchternaam
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dlW7
                              )}
                            >
                              <JnnElementKnop
                                className={classNames(
                                  "__wab_instance",
                                  sty.jnnElementKnop___8TpRw
                                )}
                                klikActie={async event => {
                                  const $steps = {};
                                  $steps["postgresUpdateById"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "viL2whDAJGPSyEaiJ1wpYg",
                                            opId: "169235cf-a7a6-4e92-adda-836b8c59ce96",
                                            userArgs: {
                                              keys: [
                                                $state.bewerkForm.value.email
                                              ],

                                              variables: [
                                                $state.bewerkForm.value
                                                  .achternaam,
                                                $state.bewerkForm.value.voornaam
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],

                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["postgresUpdateById"] != null &&
                                    typeof $steps["postgresUpdateById"] ===
                                      "object" &&
                                    typeof $steps["postgresUpdateById"].then ===
                                      "function"
                                  ) {
                                    $steps["postgresUpdateById"] = await $steps[
                                      "postgresUpdateById"
                                    ];
                                  }
                                }}
                                knopnaam={"Verandering opslaan"}
                              />

                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mgqCf
                                )}
                              >
                                <JnnElementKnop
                                  className={classNames(
                                    "__wab_instance",
                                    sty.jnnElementKnop__ataCc
                                  )}
                                  geblokkeerd={(() => {
                                    try {
                                      return !$state.checkbox.isChecked;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  klikActie={async event => {
                                    const $steps = {};
                                    $steps["postgresDeleteMany"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "viL2whDAJGPSyEaiJ1wpYg",
                                              opId: "2c748634-7a34-4e62-b73d-69b037039056",
                                              userArgs: {
                                                conditions: [
                                                  $state.bewerkForm.value.email
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],

                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresDeleteMany"] != null &&
                                      typeof $steps["postgresDeleteMany"] ===
                                        "object" &&
                                      typeof $steps["postgresDeleteMany"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresDeleteMany"] =
                                        await $steps["postgresDeleteMany"];
                                    }
                                    $steps["runActionOnBewerkForm"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            tplRef: "bewerkForm",
                                            action: "clearFields"
                                          };
                                          return (({
                                            tplRef,
                                            action,
                                            args
                                          }) => {
                                            return $refs?.[tplRef]?.[action]?.(
                                              ...(args ?? [])
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runActionOnBewerkForm"] != null &&
                                      typeof $steps["runActionOnBewerkForm"] ===
                                        "object" &&
                                      typeof $steps["runActionOnBewerkForm"]
                                        .then === "function"
                                    ) {
                                      $steps["runActionOnBewerkForm"] =
                                        await $steps["runActionOnBewerkForm"];
                                    }
                                  }}
                                  knopnaam={"verwijder lid"}
                                />

                                <Checkbox
                                  data-plasmic-name={"checkbox"}
                                  data-plasmic-override={overrides.checkbox}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.checkbox
                                  )}
                                  isChecked={
                                    generateStateValueProp($state, [
                                      "checkbox",
                                      "isChecked"
                                    ]) ?? false
                                  }
                                  name={"verwijder zeker weten"}
                                  onChange={async (...eventArgs) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "checkbox",
                                        "isChecked"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);
                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                >
                                  {"zekerweten"}
                                </Checkbox>
                              </Stack__>
                            </Stack__>
                          </FormWrapper>
                        );
                      })()}
                    </AntdAccordionItem>
                  </React.Fragment>
                ),

                onChange: async (...eventArgs) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "activePanelId",
                    ["accordion", "activePanelId"],
                    AntdAccordion_Helpers
                  ).apply(null, eventArgs);
                },
                size: "small"
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "activePanelId",
                    plasmicStateName: "accordion.activePanelId"
                  }
                ],

                [],
                AntdAccordion_Helpers ?? {},
                child$Props
              );
              return (
                <AntdAccordion
                  data-plasmic-name={"accordion"}
                  data-plasmic-override={overrides.accordion}
                  {...child$Props}
                />
              );
            })()}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uAws1
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__ewa0V
                    )}
                  >
                    {"Alle leden"}
                  </h3>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </section>
          {(() => {
            const child$Props = {
              canSelectRows: "click",
              className: classNames("__wab_instance", sty.table),
              data: (() => {
                try {
                  return $queries.alleLeden;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              defaultSize: "small",
              fields: (() => {
                const __composite = [
                  { key: "heeftfoto", fieldId: "heeftfoto", isHidden: null },
                  {
                    key: "jeugdgroep_id",
                    fieldId: "jeugdgroep_id",
                    isHidden: null
                  },
                  { key: "voornaam", fieldId: "voornaam" },
                  { key: "achternaam", fieldId: "achternaam" },
                  { key: "email", fieldId: "email" },
                  {
                    key: "contact vast tel",
                    fieldId: "contact vast tel",
                    isHidden: null
                  },
                  {
                    key: "contact mob tel",
                    fieldId: "contact mob tel",
                    isHidden: null
                  },
                  {
                    key: "contact mob voorkeur",
                    fieldId: "contact mob voorkeur",
                    isHidden: null
                  },
                  {
                    key: "contact mail",
                    fieldId: "contact mail",
                    isHidden: null
                  }
                ];

                __composite["0"]["isHidden"] = true;
                __composite["1"]["isHidden"] = true;
                __composite["5"]["isHidden"] = true;
                __composite["6"]["isHidden"] = true;
                __composite["7"]["isHidden"] = true;
                __composite["8"]["isHidden"] = true;
                return __composite;
              })(),
              hideColumnPicker: true,
              hideExports: true,
              hideSelectionBar: true,
              onRowClick: async (rowKey, row, event) => {
                const $steps = {};
                $steps["runActionOnBewerkForm"] = true
                  ? (() => {
                      const actionArgs = {
                        tplRef: "bewerkForm",
                        action: "setFieldsValue",
                        args: [$state.table.selectedRow]
                      };
                      return (({ tplRef, action, args }) => {
                        return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runActionOnBewerkForm"] != null &&
                  typeof $steps["runActionOnBewerkForm"] === "object" &&
                  typeof $steps["runActionOnBewerkForm"].then === "function"
                ) {
                  $steps["runActionOnBewerkForm"] = await $steps[
                    "runActionOnBewerkForm"
                  ];
                }
              },
              onRowSelectionChanged: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKey",
                  ["table", "selectedRowKey"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRow",
                  ["table", "selectedRow"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRows",
                  ["table", "selectedRows"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKeys",
                  ["table", "selectedRowKeys"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
              },
              pagination: false,
              scopeClassName: sty["table__instance"],
              selectedRowKey: generateStateValueProp($state, [
                "table",
                "selectedRowKey"
              ]),
              selectedRowKeys: generateStateValueProp($state, [
                "table",
                "selectedRowKeys"
              ]),
              themeResetClassName: classNames(
                projectcss.root_reset,
                projectcss.root_reset_tags,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "selectedRowKey",
                  plasmicStateName: "table.selectedRowKey"
                },
                {
                  name: "selectedRow",
                  plasmicStateName: "table.selectedRow"
                },
                {
                  name: "selectedRows",
                  plasmicStateName: "table.selectedRows"
                },
                {
                  name: "selectedRowKeys",
                  plasmicStateName: "table.selectedRowKeys"
                }
              ],

              [],
              RichTable_Helpers ?? {},
              child$Props
            );
            return (
              <RichTable
                data-plasmic-name={"table"}
                data-plasmic-override={overrides.table}
                {...child$Props}
              />
            );
          })()}
        </JnnLayoutPaginaBasis>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "link",
    "section",
    "h2",
    "accordion",
    "toevoegform",
    "nieuwEmail",
    "nieuwVoornaam",
    "nieuwAchternaam",
    "bewerkForm",
    "bewerkEmail",
    "bewerkVoornaam",
    "bewerkAchternaam",
    "checkbox",
    "table"
  ],

  h1: ["h1"],
  link: ["link"],
  section: [
    "section",
    "h2",
    "accordion",
    "toevoegform",
    "nieuwEmail",
    "nieuwVoornaam",
    "nieuwAchternaam",
    "bewerkForm",
    "bewerkEmail",
    "bewerkVoornaam",
    "bewerkAchternaam",
    "checkbox"
  ],

  h2: ["h2"],
  accordion: [
    "accordion",
    "toevoegform",
    "nieuwEmail",
    "nieuwVoornaam",
    "nieuwAchternaam",
    "bewerkForm",
    "bewerkEmail",
    "bewerkVoornaam",
    "bewerkAchternaam",
    "checkbox"
  ],

  toevoegform: [
    "toevoegform",
    "nieuwEmail",
    "nieuwVoornaam",
    "nieuwAchternaam"
  ],

  nieuwEmail: ["nieuwEmail"],
  nieuwVoornaam: ["nieuwVoornaam"],
  nieuwAchternaam: ["nieuwAchternaam"],
  bewerkForm: [
    "bewerkForm",
    "bewerkEmail",
    "bewerkVoornaam",
    "bewerkAchternaam",
    "checkbox"
  ],

  bewerkEmail: ["bewerkEmail"],
  bewerkVoornaam: ["bewerkVoornaam"],
  bewerkAchternaam: ["bewerkAchternaam"],
  checkbox: ["checkbox"],
  table: ["table"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDbStafledenbeheer__ArgProps,
          internalVariantPropNames: PlasmicDbStafledenbeheer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDbStafledenbeheer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDbStafledenbeheer";
  } else {
    func.displayName = `PlasmicDbStafledenbeheer.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={"6a8549d7-e48e-40ca-81aa-b34e70754bb0"}
      appId={"o1okMcGKKQpxNMvBHBF5AX"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "o1okMcGKKQpxNMvBHBF5AX"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicDbStafledenbeheer = Object.assign(
  // Top-level PlasmicDbStafledenbeheer renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    section: makeNodeComponent("section"),
    h2: makeNodeComponent("h2"),
    accordion: makeNodeComponent("accordion"),
    toevoegform: makeNodeComponent("toevoegform"),
    nieuwEmail: makeNodeComponent("nieuwEmail"),
    nieuwVoornaam: makeNodeComponent("nieuwVoornaam"),
    nieuwAchternaam: makeNodeComponent("nieuwAchternaam"),
    bewerkForm: makeNodeComponent("bewerkForm"),
    bewerkEmail: makeNodeComponent("bewerkEmail"),
    bewerkVoornaam: makeNodeComponent("bewerkVoornaam"),
    bewerkAchternaam: makeNodeComponent("bewerkAchternaam"),
    checkbox: makeNodeComponent("checkbox"),
    table: makeNodeComponent("table"),
    // Metadata about props expected for PlasmicDbStafledenbeheer
    internalVariantProps: PlasmicDbStafledenbeheer__VariantProps,
    internalArgProps: PlasmicDbStafledenbeheer__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Stafleden",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDbStafledenbeheer;
/* prettier-ignore-end */
